# Upload apk to Firebase distribution
- name: Upload apk to Firebase distribution
  uses: wzieba/Firebase-Distribution-Github-Action@v1.7.0
  with:
    appId: ${{ secrets.FIREBASE_APP_ID_ANDROID }}
    serviceCredentialsFileContent: ${{ secrets.FIREBASE_TOKEN }}
    groups: all_testers
    file: build/app/outputs/flutter-apk/app-release.apk

================

deploy_google_play:
    name: Deploy to Google Play
    needs: [build_appbundle] # Garante que o build foi feito
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Download App Bundle
        uses: actions/download-artifact@v4
        with:
          name: app-bundle

      - name: Deploy to Play Store
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJson: ${{ secrets.PLAY_STORE_SA_KEY }}
          packageName: com.seunome.seumobileapp # Substitua pelo ID do seu pacote
          releaseFile: app-release.aab
          track: internal # Ou 'alpha', 'beta', 'production'
          whatsNew: 'Atualização automática via CI/CD.'

==========

deploy_app_store:
    name: Deploy to App Store
    needs: [build_ios] # Garante que o build foi feito
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v5

      - name: Download iOS Artifact
        uses: actions/download-artifact@v4
        with:
          name: app-release.ipa # Nome do seu arquivo IPA se você configurou o job build_ios para gerar um

      - name: Set up Fastlane
        run: |
          gem install fastlane
          fastlane init

      - name: Deploy to TestFlight
        env:
          FASTLANE_APPLE_ID: ${{ secrets.APPLE_ID }}
          FASTLANE_PASSWORD: ${{ secrets.APP_SPECIFIC_PASSWORD }}
          FASTLANE_SESSION: ${{ secrets.FASTLANE_SESSION }}
          APP_STORE_CONNECT_TEAM_ID: ${{ secrets.APP_STORE_CONNECT_TEAM_ID }}
        run: fastlane deliver --ipa <caminho-do-seu-ipa> --api_key_path <caminho-da-chave>